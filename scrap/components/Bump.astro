---
type BumpPosition = 'flat' | 'up' | 'down';

interface Props {
  id: string;
  position?: BumpPosition;
}

const {id, position = 'flat'} = Astro.props;

const BUMP_PATH_DATA: Record<BumpPosition, string> = {
  flat: 'M0,8 C12,8 12,8 24,8 C36,8 36,8 48,8',
  up: 'M0,12 C12,12 12,2 24,2 C36,2 36,12 48,12',
  down: 'M0,2 C12,2 12,12 24,12 C36,12 36,2 48,2',
};

const CSS_VARS = {
  bumpPathFlat: `path('${BUMP_PATH_DATA.flat}')`,
  bumpPathUp: `path('${BUMP_PATH_DATA.up}')`,
  bumpPathDown: `path('${BUMP_PATH_DATA.down}')`,
};
---

<svg
  id={id}
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 48 14"
  class="SvgBump"
>
  <path
    fill="none"
    stroke="#2a736a"
    stroke-width="3"
    stroke-linecap="round"
    stroke-linejoin="round"
    d={BUMP_PATH_DATA[position]}></path>
</svg>

<style define:vars={{...CSS_VARS}}>
  /* --- Hover Animation --- */

  /*
  @keyframes bumpUpDown {
    0%,
    100% {
      d: var(--bumpPathFlat);
    }
    40% {
      d: var(--bumpPathUp);
    }
    60% {
      d: var(--bumpPathDown);
    }
  }
  */

  @keyframes bumpUpDown {
    /*
    0% {
      d: var(--bumpPathFlat);
    }
    50% {
      d: var(--bumpPathUp);
    }
    100% {
      d: var(--bumpPathDown);
    }
    */

    from {
      d: var(--bumpPathUp);
    }

    to {
      d: var(--bumpPathDown);
    }
  }

  .SvgBump {
    overflow: visible;

    > path {
      animation-name: bumpUpDown;
      animation-duration: var(--speed-slow);
      animation-timing-function: linear; /* var(--ease); */
      animation-fill-mode: both;
      animation-direction: alternate;
      animation-iteration-count: infinite;
      animation-play-state: paused;
    }

    /*
    &:hover path {
      animation-play-state: running;
    }
    */
  }
</style>
